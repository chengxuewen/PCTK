# set (git) module specific defines, but only if we are actually pctk_core do _not_ set them as the global toplevel
# configuration we check for PCTK_REPO_MODULE_VERSION before defining it below; that will ensure that when this file
# is included the second time in a toplevel buld (directly by pctk_core) we actually add the extra definitions
if (NOT DEFINED PCTK_SUPERBUILD OR DEFINED PCTK_REPO_MODULE_VERSION)
    set(PCTK_EXTRA_INTERNAL_TARGET_DEFINES "PCTK_LEAN_HEADERS=1")
endif()

set(PCTK_REPO_MODULE_VERSION "0.1.1")
set(PCTK_REPO_MODULE_PRERELEASE_VERSION_SEGMENT "alpha1")

# Minimum requirement for building PCTK
set(PCTK_SUPPORTED_MIN_CMAKE_VERSION_FOR_BUILDING_PCTK_SHARED "3.16")
set(PCTK_SUPPORTED_MIN_CMAKE_VERSION_FOR_BUILDING_PCTK_STATIC "3.17")

# Minimum requirement for consuming PCTK in a user project.
# This might be different in the future, e.g. be lower than the requirement for building PCTK.
set(PCTK_SUPPORTED_MIN_CMAKE_VERSION_FOR_USING_PCTK_SHARED "3.16")
set(PCTK_SUPPORTED_MIN_CMAKE_VERSION_FOR_USING_PCTK_STATIC "3.17")

# Policy settings for commands defined by pctk_core. These will also be injected into the top level policy scope of each
# PCTK module when building PCTK so that modules have the same policy settings as pctk_core by default. They can be
# overridden by individual PCTK modules in their own .cmake.conf files if needed.
#
# NOTE: These two values are also hard-coded in PCTKBuildInternalsConfig.cmake because that file is used in-place by a
#       superbuild, so there is no opportunity for substituting the values from here. Keep both locations in sync.
set(PCTK_MIN_NEW_POLICY_CMAKE_VERSION "3.16")
set(PCTK_MAX_NEW_POLICY_CMAKE_VERSION "3.17")
